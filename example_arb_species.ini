######################################################################################
#This file describes how to use the "arbitrary species" module.                      #
#One can specify the density (or fraction) of a perfectly homgeneous field at some z.#
#The code then interpolates using either lin, log or spline interpolation.           #
#credit: Vivian Poulin (2019)                                                        #
#vivian.poulin@umontpellier.fr                                                       #
######################################################################################

######################################################################################
# Quantities related to the arbitrary species are dubbed "_arbitrary_species"        #
# This script outputs background = rho,w,dw (the latter is useful for ca^2)          #
# and perturbations = delta, theta it also outputs Cl's and mPk.                     #
######################################################################################

#####################LCDM Parameters########################
omega_b = 0.02218
omega_cdm = 0.1205
# 100*theta_s = 1.04069
h  = 0.7
z_reio = 8.24
ln10^{10}A_s = 3.056
n_s = 0.9619

#####################specify the properties of the species#########################
arbitrary_species_number_of_knots = 8 #how many knots?
arbitrary_species_redshift_at_knot = 0, 2500,3500,4500,5500,8000,1e10,1e14 #choose the redshift (the first bin should be 0 and the last bin should be 1e14 by default)
# arbitrary_species_density_at_knot = 0.7,0.7,0.7,1,1,1,1,1 #one can pass the density rho_exDE(z)/rho_crit_today = Omega_exDE(z)
arbitrary_species_fraction_at_knot =  0.5e-9,8e-2,1e-1,8e-2,5e-2,1.5e-2,1e-30,1e-50 #one can also pass the fraction at z = rho_exDE(z)/rho_total(z); where rho_total(z) is currently computed assuming Neff = 3.046. to be improved.
# arbitrary_species_fraction_at_knot =  1e-11,1e-1,1e-50,1e-50 #one can also pass the fraction at z = rho_exDE(z)/rho_total(z); where rho_total(z) is currently computed assuming Neff = 3.046. to be improved.
arbitrary_species_is_constant_above_z = 8000 #choose a z  above which the species is assumed to behave like a cosmological constant; density or fraction values given above that z are therefore just dummy variable.
# arbitrary_species_is_constant_below_z = 2 #choose a z below which the species is assumed to behave like a cosmological constant; density or fraction values given below that z are therefore just dummy variable.
#do we want the exotic DE species to be the DE today? if yes, the code will close the universe with the last bin of the arb_species density, so that the universe satistifies Sum_i Om_i^today = 1
arbitrary_species_is_DE_today =  no #default = no
w_arbitrary_species_security_max = 1
w_arbitrary_species_security_min = -10
#choose the type of interpolation: if both set to no, will be spline. default is linear.#
arbitrary_species_interpolation_is_log = yes #interpolation in log10(rho)-log(z) or rho-z?
arbitrary_species_interpolation_is_linear = no #linear or spline interpolation ?

#do we include perturbations of the arbitrary species?
arbitrary_species_has_perturbations = yes
cs2_arbitrary_species = 10

#we can decide to interpolate in logz above some value of z. #default z = 1e30, i.e. it is not used
#to be used with caution, bugs sometimes.
#deprecated: ignored for the moment in the code.
# arbitrary_species_logz_interpolation_above_z = 0



#some parameters useful when doing MCMC
# output_H_at_z = yes
# arbitrary_species_CV_lambda = 0.1 #for cross validation; old stuff need to be checked
#compute_CV_score = no

########################additional parameters########################

root = output/ArbSpecies_logspline_
output = tCl,lCl,pCl,mPk
k_output_values = 1,0.0001
write background = yes
write parameters = yes
write warnings = yes
write thermodynamics = yes

input_verbose = 1
background_verbose = 1
thermodynamics_verbose = 1
perturbations_verbose = 1
transfer_verbose = 1
primordial_verbose = 1
spectra_verbose = 1
nonlinear_verbose = 1
lensing_verbose = 1
output_verbose = 1
